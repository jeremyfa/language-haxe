'.source.hx':

  'main class':
    'prefix': 'class'
    'body': 'class ${1:Class}\n\{\n\n\tpublic function new()\n\t\{\n\t\t$0\n\t\}\n\n\tpublic static function main()\n\t\{\n\t\tnew ${2:Class}();\n\t\}\n\}'
  'trace':
    'prefix': 'tr'
    'body': 'trace($1);$0'
  'trace with description':
    'prefix': 'trace'
    'body': 'trace(\'"$1" => \${Std.string($2)}\');$0'

  '#if':
    'prefix': '#'
    'body': '#if '
  '#else':
    'prefix': '#e'
    'body': '#else '
  '#else error':
    'prefix': '#error'
    'body': '#else error\n'

  'try':
    'prefix': 'try'
    'body': 'try {\n\t$0\n} catch (${1:error:Dynamic}) {\n\ttrace(\'Error: \$error\');\n}'
  'catch':
    'prefix': 'catch'
    'body': 'catch (${1:error}) {\n\t${2:expression}\n}'

  'do..while':
    'prefix': 'do'
    'body': 'do {\n\t$0\n} while (${1:condition});'
  'continue':
    'prefix': 'co'
    'body': 'continue;'
  'break':
    'prefix': 'br'
    'body': 'break;'

  'if':
    'prefix': 'if'
    'body': 'if (${1:condition}) {\n\t$0\n}'
  'else':
    'prefix': 'else'
    'body': 'else {\n\t$0\n}'
  'else..if':
    'prefix': 'elseif'
    'body': 'else if (${1:condition}) {\n\t$0\n}'
  'if..else':
    'prefix': 'ifelse'
    'body': 'if (${1:condition}) \{\n\t${2:expression}\n\} else \{\n\t${3:expression}\n\}'
  'switch':
    'prefix': 'switch'
    'body': 'switch ($1) {\n\tcase $2:\n\t\t$0\n}\n'
  'case':
    'prefix': 'case'
    'body': 'case ${1:expression}:\n\t${2:statement}\n'
  'default':
    'prefix': 'def'
    'body': 'default:\n\t${1:statement}'
  'return':
    'prefix': 'ret'
    'body': 'return $1;$0'

  'block comment':
    'prefix': '/**'
    'body': '/**\n *  $0\n **/'
  'package':
    'prefix': 'package'
    'body': 'package $1;$0'
  'class':
    'prefix': 'class'
    'body': 'class ${1:Class} ${2:extends ${3:SuperClass}} ${4:implements ${5:Interface}} \n\{\n\n\tpublic function new()\n\t\{\n\t\t${6:super();\n\t\t}$0\n\t\}\n\}'
  'enum':
    'prefix': 'enum'
    'body': 'enum ${1:Name}\n{\n\t$0\n}'
  'extern':
    'prefix': 'extern'
    'body': 'extern '
  'import':
    'prefix': 'import'
    'body': 'import ${1:package};$0'
  'interface':
    'prefix': 'interface'
    'body': 'interface ${1:Interface} ${2:extends ${3:Parent} }\n{\n\t$0\n}'
  'macro class':
    'prefix': 'macro'
    'body': '@:macro class ${1:Class}\n\{\n\tpublic static function ${2:main}()\{\n\t\t$0\n\t\}\n\}'
  'macro function':
    'prefix': 'macro'
    'body': '@:macro public static function ${1:name}(${2:e:haxe.macro.Expr}) : haxe.macro.Expr\n\{\n\t$0\n\}'

  'for var in 0...end':
    'prefix': 'for'
    'body': 'for (${1:var} in ${2:0}...${3:end}) {\n\t${4:expression}\n}'
  'for in':
    'prefix': 'for'
    'body': 'for ($1 in $2) {\n\t$0\n}'

  'main':
    'prefix': 'main'
    'body': 'public static function main():Void {\n\t$0\n}'
  'new':
    'prefix': 'new'
    'body': 'public function new() {\n\t$0\n}'
  'function':
    'prefix': 'function'
    'body': 'function ${1:name}(${2:params})${3::${4:Void}} \{\n\t$0\n\}'

  'private':
    'prefix': 'private'
    'body': 'private '
  'public':
    'prefix': 'public'
    'body': 'public '
  'inline':
    'prefix': 'inline'
    'body': 'inline '
  'static':
    'prefix': 'static'
    'body': 'static '

  'autotyped variable':
    'prefix': 'var'
    'body': 'var ${1:name} ${2:: ${3:Type}}${4: = }$5;$0'
